set encoding=utf-8
set nocompatible

" Store all backups in same directory, named with full paths and timestamps
set backup
set backupdir=~/.vim/.backup//,.
set backupskip+=~/.vim
au BufWritePre * let &bex = '-' . strftime("%Y%m%d-%H%M%S%z") . '.bk'

" Store all swapfiles in same directory, named with full paths
set directory=~/.vim/.swap//,.
set swapfile

" Enable filetype selection
" see: https://vi.stackexchange.com/a/10125
filetype plugin indent on

" Indent by 2 spaces by default, show <tab>s as 4 characters wide
set shiftwidth=2
set tabstop=4
set noexpandtab

" Disable line wrap by default
set nowrap

" Show whitespace
set list

" Show absolute line number for current line and relative for others
set number
set numberwidth=5
set relativenumber

" Always show plaintext status and tab lines, even in GUI
set guioptions-=e
set laststatus=2
set showtabline=2

" Don't show `-- INSERT --`, `-- VISUAL --`, etc. when entering modes as
" `lightline` plugin clearly indicatess it already
set noshowmode

" Show in-progress normal mode commands under the status bar
set showcmd

colorscheme one
set background=dark

let g:lightline = {
  \   "colorscheme": "one",
  \   "active": {
  \     "left": [
  \       ["mode", "paste"],
  \       ["gitbranch", "readonly", "filename"]
  \     ],
  \     "right": [
  \       ["lineinfo"],
  \       ["lineinfototal"],
  \       ["percent"],
  \       ["fileformat"],
  \       ["fileencoding"],
  \       ["filetype"]
  \     ]
  \   },
  \   "component_function": {
  \     "filename": "LightlineFilename",
  \     "gitbranch": "FugitiveHead",
  \     "lineinfototal": "LightlineLineinfototal"
  \   }
  \ }

function! LightlineFilename()
  let path = expand('%')
  let mod = &modified ? '*' : ''
  return path . mod
endfunction

function! LightlineLineinfototal()
  " Shows `[total line count]:[length of line under cursor]`
  let rows = line('$')
  let cols = strlen(getline('.'))
  return rows . ':' . cols
endfunction

" Use tree view by default in file explorer
let g:netrw_liststyle=3

" Open netrw when vim is started with no arguments
" see: https://stackoverflow.com/a/46217143/6314470
augroup ProjectDrawer
  autocmd!
  autocmd VimEnter * if argc() == 0 | Explore! | endif
augroup End

" Reload vim config on save
" see: https://superuser.com/a/1120318
augroup vimrc
  autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
  autocmd! BufWritePost $MYGVIMRC if has ('gui_running') | source % | echom "Reloaded " . $MYGVIMRC | endif | redraw
augroup End

let g:rustfmt_autosave = 1
